# Create docker image with TF serving on GPU 
# Ubuntu 14.04 LTS with nvidia-docker (https://github.com/NVIDIA/nvidia-docker)
# docker: docker bash
# host: bash on host machine

# FROM defines the base image
FROM nvidia/cuda:7.5

MAINTAINER Hieu Nguyen <hieunm@sixthgearstudios.com>

# RUN executes a shell command
# You can chain multiple commands together with && 
# A \ is used to split long lines to help with readability

## set the working directory 
#WORKDIR /usr/local/cuda/samples/1_Utilities/deviceQuery

RUN apt-get update && apt-get install -y \
        build-essential \
        curl \
        git \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        python-numpy \
        python-pip \
        software-properties-common \
        swig \
        zip \
        zlib1g-dev \
        libffi-dev libssl-dev libjpeg-dev redis-server nano \
        && \
    apt-get clean autoclean && \
    apt-get autoremove --yes && \ 
    rm -rf /var/lib/{apt,dpkg,cache,log}/ /tmp/* /var/tmp/*

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Set up grpc

RUN pip install enum34 futures six && \
    pip install --pre protobuf>=3.0.0a3 && \
    pip install -i https://testpypi.python.org/simple --pre grpcio

# Set up Bazel.

# We need to add a custom PPA to pick up JDK8, since trusty doesn't
# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:
# Matthias Klose (https://launchpad.net/~doko).  It will do until
# we either update the base image beyond 14.04 or openjdk-8 is
# finally backported to trusty; see e.g.
#   https://bugs.launchpad.net/trusty-backports/+bug/1368094
RUN add-apt-repository -y ppa:openjdk-r/ppa && \
    apt-get update && \
    apt-get install -y openjdk-8-jdk openjdk-8-jre-headless && \
    apt-get clean autoclean && \
    apt-get autoremove --yes && \ 
    rm -rf /var/lib/{apt,dpkg,cache,log}/ /tmp/* /var/tmp/*

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/root/.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/root/.bazelrc
ENV BAZELRC /root/.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.2.0
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

#docker, install TF serving (https://tensorflow.github.io/serving/setup)
RUN git clone --recurse-submodules https://github.com/tensorflow/serving

# Setup Sgsnet client, python webserver, requests package
#RUN pip install Pillow && \    
#    pip install requests --upgrade && \
#    pip install requests[security] --upgrade && \
#    pip install gunicorn flask && \
#    pip install celery && \
#    pip install celery[redis] && \
#    rm -rf /var/lib/{apt,dpkg,cache,log}/ /tmp/* /var/tmp/*    

# CMD defines the default command to be run in the container 
# CMD is overridden by supplying a command + arguments to 
# `docker run`, e.g. `nvcc --version` or `bash`
CMD ["/bin/bash"]    
