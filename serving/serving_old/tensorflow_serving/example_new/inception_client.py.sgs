# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

#!/usr/bin/env python2.7

"""Send JPEG image to inception_inference server for classification.
"""

# This is a placeholder for a Google-internal import.

from grpc.beta import implementations
import tensorflow as tf

from tensorflow_serving.example import inception_inference_pb2
import collections

tf.app.flags.DEFINE_string('server', 'localhost:9000',
                           'inception_inference service host:port')
tf.app.flags.DEFINE_string('image', '', 'path to image in JPEG format')
FLAGS = tf.app.flags.FLAGS


NUM_CLASSES = 5

ADULT = ['ass', 'penis', 'vagina', 'womanbreast', 'sex-intercourse']
ALCOHOL = ['beer_can', 'beer bottle', 'beer glass', 'wine bottle', 
	   'whiskey jug', 'red wine']
RACY = ['middle-finger_hand-sign', 'butt-plug', 'dildo', 'pants', 'swimwear', 
	'thong', 'underwear', 'bikini, two-piece', 'maillot', 'maillot, tank suit',
	'brassiere, bra, bandeau', 'miniskirt, mini', 
	'swimming trunks, bathing trunks']
VIOLENCE = ['violence-ufc']
WEAPON = ['pistol', 'machine-gun', 'shotgun', 'revolver, six-gun, six-shooter', 
	  'rifle', 'assault rifle, assault gun', 'bow', 
	  'letter opener, paper knife, paperknife', 'chain saw, chainsaw', 
	  'hammer']

USEFUL_SCORES = [ADULT, ALCOHOL, RACY, VIOLENCE, WEAPON]


def main(_):
  host, port = FLAGS.server.split(':')
  channel = implementations.insecure_channel(host, int(port))
  stub = inception_inference_pb2.beta_create_InceptionService_stub(channel)
  # Send request
  with open(FLAGS.image, 'rb') as f:
    # See inception_inference.proto for gRPC request/response details.
    data = f.read()
    request = inception_inference_pb2.InceptionRequest()
    request.jpeg_encoded = data
    result = stub.Classify(request, 10.0)  # 10 secs timeout
    #print result
    #top5_c = result.classes[0:5]
    #top5_s = result.scores[0:5]
    #print top5_c
    #print top5_s
    
    probs = collections.OrderedDict()
    for c,s in zip(result.classes, result.scores):
      probs[c] = s
    #print probs
    
    output = collections.OrderedDict([('Adult',0), ('Alcohol',0), ('Racy',0), 
				      ('Violence',0), ('Weapon',0)])
    #print output
    for o, us in zip(output, USEFUL_SCORES):
    #lstAd = [p for p in probs if p in ADULT]
    #lstAdVal = [probs[p] for p in probs if p in ADULT]
    #print lstAd
    #print lstAdVal    
      output[o] = sum([probs[c] for c in us])
    print output
    import json
    print json.dumps(output)
    #print USEFUL_SCORES

if __name__ == '__main__':
  tf.app.run()
